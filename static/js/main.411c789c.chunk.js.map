{"version":3,"sources":["components/NewBook/BookForm.js","components/BooksList/BooksItem.js","components/BooksList/BooksList.js","components/DialogStatus/DialogStatus.js","App.js","reportWebVitals.js","index.js"],"names":["BookForm","props","useState","enteredTitle","setEnteredTitle","enteredAuthor","setEnteredAuthor","enteredIsbn","setEnteredIsbn","id","name","onSubmit","event","preventDefault","formData","FormData","target","formDataObj","Object","fromEntries","title","author","isbn","onAddBookData","bookData","Math","random","className","type","onChange","value","BooksItem","href","onClick","removeDataBook","parentElement","previousElementSibling","textContent","BooksList","removeBookHandler","onRemoveBook","bookslist","map","book","DialogStatus","classes","showMessage","classeMessage","message","App","storedBooks","setStoredBooks","stateMessage","setStateMessage","args","prevState","index","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.411c789c.chunk.js","sourcesContent":["import { useState } from 'react'\r\nconst BookForm = (props) => {\r\n\r\n    // const [bookInput, setBookInput] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAuthor: '',\r\n    //     enteredIsbn: '',\r\n    // })\r\n    const [enteredTitle, setEnteredTitle] = useState('')\r\n    const [enteredAuthor, setEnteredAuthor] = useState('')\r\n    const [enteredIsbn, setEnteredIsbn] = useState('')\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value)\r\n    }\r\n    const authorChangeHandler = (event) => {\r\n        setEnteredAuthor(event.target.value)\r\n    }\r\n    const isbnChangeHandler = (event) => {\r\n        setEnteredIsbn(event.target.value)\r\n    }\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = new FormData(event.target)\r\n        const formDataObj = Object.fromEntries(formData)\r\n        const { title, author, isbn } = formDataObj\r\n\r\n\r\n        if (title === '' || author === '' || isbn === '') {\r\n            props.onAddBookData('Please fill in all fields', 'danger')\r\n        } else {\r\n            const bookData = {\r\n                isbn: enteredIsbn,\r\n                title: enteredTitle,\r\n                author: enteredAuthor,\r\n                id: Math.random()\r\n\r\n            }\r\n            props.onAddBookData('Add book success', 'success', bookData)\r\n        }\r\n\r\n        // Set new value input\r\n        setEnteredTitle('')\r\n        setEnteredAuthor('')\r\n        setEnteredIsbn('')\r\n    }\r\n    return (\r\n        <div>\r\n            <form id=\"book-form\" name=\"book-form\" onSubmit={submitHandler}>\r\n                <div className=\"form-group\">\r\n                    <label >Title</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        className=\"form-control\"\r\n                        onChange={titleChangeHandler}\r\n                        value={enteredTitle}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label >Author</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"author\"\r\n                        name=\"author\"\r\n                        className=\"form-control\"\r\n                        onChange={authorChangeHandler}\r\n\r\n                        value={enteredAuthor}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label >ISBN#</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"isbn\"\r\n                        name=\"isbn\"\r\n                        className=\"form-control\"\r\n                        onChange={isbnChangeHandler}\r\n\r\n                        value={enteredIsbn}\r\n                    />\r\n                </div>\r\n                <br />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Add Book\"\r\n                    className=\"btn btn-primary btn-block\"\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BookForm;","const BooksItem = (props) => {\r\n    // console.log('%cBooks Items: ', 'color: green', props.title)\r\n\r\n    const removeHandler = (event) => {\r\n        props.removeDataBook(event.target.parentElement.previousElementSibling.textContent)\r\n    }\r\n    return (\r\n        <tr >\r\n            <td>{props.title}</td>\r\n            <td>{props.author}</td>\r\n            <td>{props.isbn}</td>\r\n            <td><a href=\"#\" className=\"btn btn-danger btn-sm delete\" data-isbn={props.id} onClick={removeHandler}>X</a></td>\r\n        </tr >\r\n    )\r\n}\r\nexport default BooksItem","import BooksItem from \"./BooksItem\"\r\n\r\nconst BooksList = (props) => {\r\n    // console.log(props.bookslist[0].title)\r\n    const removeBookHandler = (isbn) => {\r\n        props.onRemoveBook(isbn)\r\n    }\r\n    return (\r\n        <div>\r\n            <table className=\"table table-hover mt-5\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Author</th>\r\n                        <th>ISBN#</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* <BooksItem\r\n                        title={props.bookslist[0].title}\r\n                        author={props.bookslist[0].author}\r\n                        isbn={props.bookslist[0].isbn}\r\n                    />\r\n                    <BooksItem\r\n                        title={props.bookslist[1].title}\r\n                        author={props.bookslist[1].author}\r\n                        isbn={props.bookslist[1].isbn}\r\n                    /> */}\r\n\r\n                    {props.bookslist.map((book) => (\r\n                        <BooksItem\r\n                            key={book.id}\r\n                            title={book.title}\r\n                            author={book.author}\r\n                            isbn={book.isbn}\r\n                            removeDataBook={removeBookHandler}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nexport default BooksList","const DialogStatus = (props) => {\r\n    const classes = 'alert' + ' ' + 'alert-' + props.showMessage.classeMessage\r\n    const message = props.showMessage.message\r\n\r\n    return (\r\n        <div className={classes}>{message}</div>\r\n    )\r\n}\r\nexport default DialogStatus","// import logo from './logo.svg';\n// import './App.css';\nimport React, { useState } from 'react'\nimport BookForm from './components/NewBook/BookForm'\nimport BooksList from './components/BooksList/BooksList'\nimport DialogStatus from './components/DialogStatus/DialogStatus';\nfunction App () {\n\n    const DUMMY_STORED = [\n        {\n            id: 1,\n            isbn: '6645',\n            title: 'Tắt Đèn',\n            author: 'Ngồ Tất Tố'\n        },\n        {\n            id: 2,\n            isbn: '4848',\n            title: 'Lão Hạc',\n            author: 'Nam Cao'\n        },\n    ]\n\n    const [storedBooks, setStoredBooks] = useState(DUMMY_STORED)\n    const [stateMessage, setStateMessage] = useState({\n        message: '',\n        classeMessage: ''\n    })\n    const addBookDataHandler = (...args) => {\n        if (args[2]) {\n            setStateMessage({\n                message: args[0],\n                classeMessage: args[1]\n            })\n            setStoredBooks(prevState => {\n                return [args[2], ...prevState]\n            })\n\n        } else {\n            setStateMessage({\n                message: args[0],\n                classeMessage: args[1]\n            })\n        }\n    }\n    const removeBookHandler = (isbn) => {\n        storedBooks.map((book, index) => {\n            if (book.isbn === isbn) {\n                storedBooks.splice(index, 1)\n            }\n        })\n        setStoredBooks(() => {\n            setStateMessage({\n                message: 'Book remove success !!',\n                classeMessage: 'success'\n            })\n            return [...storedBooks]\n        })\n    }\n    return (\n        <div className=\"container mt-4\">\n            <h1 className=\"display-4 text-center\">\n                <i className=\"fas fa-book-open\"></i>\n                My<span className=\"text-primary\">Book</span>List\n            </h1>\n            <DialogStatus showMessage={stateMessage} />\n            <BookForm onAddBookData={addBookDataHandler} />\n            <BooksList bookslist={storedBooks} onRemoveBook={removeBookHandler} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}